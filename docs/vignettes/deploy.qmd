---
format:
  md:
    prefer_html: true
---
# Deploy

`docsify.js`, `docute` and `mkdocs` documentations can be deployed with several
tools. The authors of these documentation generators have all written detailed
guides to deployment, which you can read here:

* [Docsify deployment](https://docsify.js.org/#/deploy)
* [Docute deployment](https://docute.egoist.dev/guide/deployment)
* [MkDocs deployment](https://www.mkdocs.org/user-guide/deploying-your-docs/).

We'll just focus on GitHub Pages and Netlify here.

## GitHub Pages

Deploying package documentation to Github Pages is very convenient. With this
strategy you can point readers to an address like `mypackage.github.io` or to a
custom domain of your choice.

### Using the `main` branch and `docs/` directory

The simplest way to deploy a website from Github is to use the `docs/` directory from the `main` (or `master`) branch of your repository. Thuis process is usually very simple:

1. Go to your Github repository settings. 
2. Click on "Pages" in the left sidebar. 
3. Under "Build and deployment", select:
   - Deploy from branch
   - Branch: `main` or `master` (depending on your git repository settings)
   - Select folder: `docs/`
4. Update your `altdoc` site, commit, and push to Github. Make sure all files in
`docs/` are committed to the repository, including hidden files like
`.nojekyll`.

Detailed instructions are available on Github's website:

* https://docs.github.com/en/pages
* https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site
[Github offers]

### Github Actions

Once you're happy with your `altdoc` setup, you can use `setup_github_actions()`
to create the file `.github/workflows/altdoc.yaml`. This workflow will
automatically run `render_docs()` on Github when you push to the `main` or
`master` branch. The rendered documentation is then stored in the `gh-pages`
branch, that you can use with the service of your choice to deploy your
website, as explained below.

Note that you don't have to use this Github action workflow. If you prefer, you
can simply run `render_docs()` by yourself and push the changes to the branch of
your choice. The workflow simply is here to make that systematically at each
push to `main`/`master`.


## Netlify

The process is the same as for deploying a blog made with `{blogdown}`, so we
invite you to follow the steps described in the [`{blogdown}`
book](https://bookdown.org/yihui/blogdown/netlify.html).

In case this is useful, we now describe how Etienne got his documentation
deployed with an address like `mypackage.mywebsite.com`. The context is:

* Website made with `{distill}`, deployed through Netlify;
* Custom domain name, such as `mywebsite.com`;
* We would like to have the package documentation as a subdomain, such as `mypackage.mywebsite.com`.

If you are in the same situation, you can follow the steps below. Otherwise, you
should refer to `docsify.js` documentation linked above.

1. Push your package with the documentation to GitHub. 
2. Log into Netlify with your GitHub account. 
3. Create a "New site from Git" and choose GitHub as Git provider. 
4. Choose the repo containing your package. 
5. In "Basic build settings", write "docs" (the name of the folder where the documentation is stored) in "Publish directory". Click on "Deploy site".

Your page with the documentation is created, but the domain is a random name so
we need to change it.

6. Click on "Domain settings". In "Custom domains", click on "Add custom
domain". 
7. Add a custom domaine name. For example, if you own `mywebsite.com`, you can 
name the custom domain as `mypackage.mywebsite.com`. 
8. Confirm that you are the owner of `mywebsite.com`. 
9. Force HTTPS (automatically proposed by Netlify).

Done! You can now check at `mypackage.mywebsite.com` that the documentation is
well loaded. This will update every time you modify the source of the website on
GitHub.
